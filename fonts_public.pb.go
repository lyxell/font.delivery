// Source: https://github.com/googlefonts/gftools/blob/a437cee173f1dd6009121bffc948b8e3cfd01487/Lib/gftools/fonts_public.proto
// License: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: fonts_public.proto

//*
// Open Source'd font metadata proto formats.

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetTypeProto int32

const (
	TargetTypeProto_TARGET_UNSPECIFIED TargetTypeProto = 0
	TargetTypeProto_TARGET_OS_WINDOWS  TargetTypeProto = 1
	TargetTypeProto_TARGET_OS_MAC      TargetTypeProto = 2
	TargetTypeProto_TARGET_OS_LINUX    TargetTypeProto = 3
	TargetTypeProto_TARGET_OS_ANDROID  TargetTypeProto = 4
	TargetTypeProto_TARGET_OS_IOS      TargetTypeProto = 5
)

// Enum value maps for TargetTypeProto.
var (
	TargetTypeProto_name = map[int32]string{
		0: "TARGET_UNSPECIFIED",
		1: "TARGET_OS_WINDOWS",
		2: "TARGET_OS_MAC",
		3: "TARGET_OS_LINUX",
		4: "TARGET_OS_ANDROID",
		5: "TARGET_OS_IOS",
	}
	TargetTypeProto_value = map[string]int32{
		"TARGET_UNSPECIFIED": 0,
		"TARGET_OS_WINDOWS":  1,
		"TARGET_OS_MAC":      2,
		"TARGET_OS_LINUX":    3,
		"TARGET_OS_ANDROID":  4,
		"TARGET_OS_IOS":      5,
	}
)

func (x TargetTypeProto) Enum() *TargetTypeProto {
	p := new(TargetTypeProto)
	*p = x
	return p
}

func (x TargetTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_fonts_public_proto_enumTypes[0].Descriptor()
}

func (TargetTypeProto) Type() protoreflect.EnumType {
	return &file_fonts_public_proto_enumTypes[0]
}

func (x TargetTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TargetTypeProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TargetTypeProto(num)
	return nil
}

// Deprecated: Use TargetTypeProto.Descriptor instead.
func (TargetTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{0}
}

type FamilyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Designer *string `protobuf:"bytes,2,req,name=designer" json:"designer,omitempty"`
	License  *string `protobuf:"bytes,3,req,name=license" json:"license,omitempty"`
	// A mutually-exclusive category for each font. The categories are: Serif,
	// Sans Serif, Display, Handwriting and Monospace. Being mutually exclusive is
	// a significant deficiency as, for example, most Display fonts are typically
	// Serif or Sans Serif and that is not captured.
	//
	// For searching, this field is replaced by stroke and classifications (see
	// below), however, this field persists (it's required after all) and will
	// continue to be populated in the onboarding process.
	//
	// This is repeated field, yet Google Fonts only uses the last entry so
	// multiple entries should be avoided.
	Category                 []string               `protobuf:"bytes,4,rep,name=category" json:"category,omitempty"` // Only the LAST value is used by Google Fonts
	DateAdded                *string                `protobuf:"bytes,5,req,name=date_added,json=dateAdded" json:"date_added,omitempty"`
	Fonts                    []*FontProto           `protobuf:"bytes,6,rep,name=fonts" json:"fonts,omitempty"`
	Aliases                  []string               `protobuf:"bytes,7,rep,name=aliases" json:"aliases,omitempty"`
	Subsets                  []string               `protobuf:"bytes,8,rep,name=subsets" json:"subsets,omitempty"`
	TtfAutohintArgs          *string                `protobuf:"bytes,9,opt,name=ttf_autohint_args,json=ttfAutohintArgs" json:"ttf_autohint_args,omitempty"`
	Axes                     []*AxisSegmentProto    `protobuf:"bytes,10,rep,name=axes" json:"axes,omitempty"`
	RegistryDefaultOverrides map[string]float32     `protobuf:"bytes,11,rep,name=registry_default_overrides,json=registryDefaultOverrides" json:"registry_default_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Source                   *SourceProto           `protobuf:"bytes,12,opt,name=source" json:"source,omitempty"`
	IsNoto                   *bool                  `protobuf:"varint,13,opt,name=is_noto,json=isNoto" json:"is_noto,omitempty"`
	Languages                []string               `protobuf:"bytes,14,rep,name=languages" json:"languages,omitempty"`
	Fallbacks                []*FamilyFallbackProto `protobuf:"bytes,15,rep,name=fallbacks" json:"fallbacks,omitempty"`
	SampleGlyphs             map[string]string      `protobuf:"bytes,16,rep,name=sample_glyphs,json=sampleGlyphs" json:"sample_glyphs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SampleText               *SampleTextProto       `protobuf:"bytes,17,opt,name=sample_text,json=sampleText" json:"sample_text,omitempty"`
	DisplayName              *string                `protobuf:"bytes,18,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	OrderedSampleGlyphs      []*GlyphGroupProto     `protobuf:"bytes,19,rep,name=ordered_sample_glyphs,json=orderedSampleGlyphs" json:"ordered_sample_glyphs,omitempty"`
	// Optional url for more info about the font.
	MinisiteUrl *string `protobuf:"bytes,20,opt,name=minisite_url,json=minisiteUrl" json:"minisite_url,omitempty"`
	// The script to use when picking sample text. See the Script spanner table.
	PrimaryScript   *string `protobuf:"bytes,21,opt,name=primary_script,json=primaryScript" json:"primary_script,omitempty"`
	PrimaryLanguage *string `protobuf:"bytes,22,opt,name=primary_language,json=primaryLanguage" json:"primary_language,omitempty"`
	// Stroke of the letter forms: serif, sans serif, etc. Stroke is mutually
	// exclusive. The values are the string names from the Stroke enum or the
	// empty string.
	Stroke *string `protobuf:"bytes,23,opt,name=stroke" json:"stroke,omitempty"`
	// A family's broad classifications: display, handwriting, monospace, etc.
	// The values are the string names from the Classification enum.
	Classifications []string `protobuf:"bytes,25,rep,name=classifications" json:"classifications,omitempty"` // Next = 25
}

func (x *FamilyProto) Reset() {
	*x = FamilyProto{}
	mi := &file_fonts_public_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FamilyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyProto) ProtoMessage() {}

func (x *FamilyProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyProto.ProtoReflect.Descriptor instead.
func (*FamilyProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{0}
}

func (x *FamilyProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FamilyProto) GetDesigner() string {
	if x != nil && x.Designer != nil {
		return *x.Designer
	}
	return ""
}

func (x *FamilyProto) GetLicense() string {
	if x != nil && x.License != nil {
		return *x.License
	}
	return ""
}

func (x *FamilyProto) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *FamilyProto) GetDateAdded() string {
	if x != nil && x.DateAdded != nil {
		return *x.DateAdded
	}
	return ""
}

func (x *FamilyProto) GetFonts() []*FontProto {
	if x != nil {
		return x.Fonts
	}
	return nil
}

func (x *FamilyProto) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *FamilyProto) GetSubsets() []string {
	if x != nil {
		return x.Subsets
	}
	return nil
}

func (x *FamilyProto) GetTtfAutohintArgs() string {
	if x != nil && x.TtfAutohintArgs != nil {
		return *x.TtfAutohintArgs
	}
	return ""
}

func (x *FamilyProto) GetAxes() []*AxisSegmentProto {
	if x != nil {
		return x.Axes
	}
	return nil
}

func (x *FamilyProto) GetRegistryDefaultOverrides() map[string]float32 {
	if x != nil {
		return x.RegistryDefaultOverrides
	}
	return nil
}

func (x *FamilyProto) GetSource() *SourceProto {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FamilyProto) GetIsNoto() bool {
	if x != nil && x.IsNoto != nil {
		return *x.IsNoto
	}
	return false
}

func (x *FamilyProto) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *FamilyProto) GetFallbacks() []*FamilyFallbackProto {
	if x != nil {
		return x.Fallbacks
	}
	return nil
}

func (x *FamilyProto) GetSampleGlyphs() map[string]string {
	if x != nil {
		return x.SampleGlyphs
	}
	return nil
}

func (x *FamilyProto) GetSampleText() *SampleTextProto {
	if x != nil {
		return x.SampleText
	}
	return nil
}

func (x *FamilyProto) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *FamilyProto) GetOrderedSampleGlyphs() []*GlyphGroupProto {
	if x != nil {
		return x.OrderedSampleGlyphs
	}
	return nil
}

func (x *FamilyProto) GetMinisiteUrl() string {
	if x != nil && x.MinisiteUrl != nil {
		return *x.MinisiteUrl
	}
	return ""
}

func (x *FamilyProto) GetPrimaryScript() string {
	if x != nil && x.PrimaryScript != nil {
		return *x.PrimaryScript
	}
	return ""
}

func (x *FamilyProto) GetPrimaryLanguage() string {
	if x != nil && x.PrimaryLanguage != nil {
		return *x.PrimaryLanguage
	}
	return ""
}

func (x *FamilyProto) GetStroke() string {
	if x != nil && x.Stroke != nil {
		return *x.Stroke
	}
	return ""
}

func (x *FamilyProto) GetClassifications() []string {
	if x != nil {
		return x.Classifications
	}
	return nil
}

type FontProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           *string   `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Style          *string   `protobuf:"bytes,2,req,name=style" json:"style,omitempty"`
	Weight         *int32    `protobuf:"varint,3,req,name=weight" json:"weight,omitempty"`
	Filename       *string   `protobuf:"bytes,4,req,name=filename" json:"filename,omitempty"`
	PostScriptName *string   `protobuf:"bytes,5,req,name=post_script_name,json=postScriptName" json:"post_script_name,omitempty"`
	FullName       *string   `protobuf:"bytes,6,req,name=full_name,json=fullName" json:"full_name,omitempty"`
	Copyright      *string   `protobuf:"bytes,7,opt,name=copyright" json:"copyright,omitempty"`
	Position       *Position `protobuf:"bytes,8,opt,name=position" json:"position,omitempty"`
}

func (x *FontProto) Reset() {
	*x = FontProto{}
	mi := &file_fonts_public_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FontProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FontProto) ProtoMessage() {}

func (x *FontProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FontProto.ProtoReflect.Descriptor instead.
func (*FontProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{1}
}

func (x *FontProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FontProto) GetStyle() string {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return ""
}

func (x *FontProto) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *FontProto) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *FontProto) GetPostScriptName() string {
	if x != nil && x.PostScriptName != nil {
		return *x.PostScriptName
	}
	return ""
}

func (x *FontProto) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *FontProto) GetCopyright() string {
	if x != nil && x.Copyright != nil {
		return *x.Copyright
	}
	return ""
}

func (x *FontProto) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type AxisSegmentProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag      *string  `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	MinValue *float32 `protobuf:"fixed32,2,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue *float32 `protobuf:"fixed32,4,opt,name=max_value,json=maxValue" json:"max_value,omitempty"` // Next = 5
}

func (x *AxisSegmentProto) Reset() {
	*x = AxisSegmentProto{}
	mi := &file_fonts_public_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AxisSegmentProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisSegmentProto) ProtoMessage() {}

func (x *AxisSegmentProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisSegmentProto.ProtoReflect.Descriptor instead.
func (*AxisSegmentProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{2}
}

func (x *AxisSegmentProto) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *AxisSegmentProto) GetMinValue() float32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *AxisSegmentProto) GetMaxValue() float32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

type SourceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryUrl *string            `protobuf:"bytes,1,opt,name=repository_url,json=repositoryUrl" json:"repository_url,omitempty"`
	Branch        *string            `protobuf:"bytes,5,opt,name=branch" json:"branch,omitempty"`
	Commit        *string            `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	ArchiveUrl    *string            `protobuf:"bytes,3,opt,name=archive_url,json=archiveUrl" json:"archive_url,omitempty"`
	Files         []*SourceFileProto `protobuf:"bytes,4,rep,name=files" json:"files,omitempty"` // Next = 6
}

func (x *SourceProto) Reset() {
	*x = SourceProto{}
	mi := &file_fonts_public_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceProto) ProtoMessage() {}

func (x *SourceProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceProto.ProtoReflect.Descriptor instead.
func (*SourceProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{3}
}

func (x *SourceProto) GetRepositoryUrl() string {
	if x != nil && x.RepositoryUrl != nil {
		return *x.RepositoryUrl
	}
	return ""
}

func (x *SourceProto) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *SourceProto) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

func (x *SourceProto) GetArchiveUrl() string {
	if x != nil && x.ArchiveUrl != nil {
		return *x.ArchiveUrl
	}
	return ""
}

func (x *SourceProto) GetFiles() []*SourceFileProto {
	if x != nil {
		return x.Files
	}
	return nil
}

// A file to take from source and where to put it in dest
// Ex web/split/Roboto[wdth,wght].ttf => Roboto[wdth,wght].ttf
type SourceFileProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile *string `protobuf:"bytes,1,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	DestFile   *string `protobuf:"bytes,2,opt,name=dest_file,json=destFile" json:"dest_file,omitempty"`
}

func (x *SourceFileProto) Reset() {
	*x = SourceFileProto{}
	mi := &file_fonts_public_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceFileProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceFileProto) ProtoMessage() {}

func (x *SourceFileProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceFileProto.ProtoReflect.Descriptor instead.
func (*SourceFileProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{4}
}

func (x *SourceFileProto) GetSourceFile() string {
	if x != nil && x.SourceFile != nil {
		return *x.SourceFile
	}
	return ""
}

func (x *SourceFileProto) GetDestFile() string {
	if x != nil && x.DestFile != nil {
		return *x.DestFile
	}
	return ""
}

// Message so we can add additional fields like value in future
type TargetProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetType *TargetTypeProto `protobuf:"varint,1,opt,name=target_type,json=targetType,enum=google.fonts_public.TargetTypeProto" json:"target_type,omitempty"` //  e.g., OS
}

func (x *TargetProto) Reset() {
	*x = TargetProto{}
	mi := &file_fonts_public_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetProto) ProtoMessage() {}

func (x *TargetProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetProto.ProtoReflect.Descriptor instead.
func (*TargetProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{5}
}

func (x *TargetProto) GetTargetType() TargetTypeProto {
	if x != nil && x.TargetType != nil {
		return *x.TargetType
	}
	return TargetTypeProto_TARGET_UNSPECIFIED
}

type FamilyFallbackProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisTarget        []*AxisSegmentProto `protobuf:"bytes,1,rep,name=axis_target,json=axisTarget" json:"axis_target,omitempty"`                          // activate for this region
	Target            []*TargetProto      `protobuf:"bytes,2,rep,name=target" json:"target,omitempty"`                                                    // activate for any of these
	SizeAdjustPct     *float32            `protobuf:"fixed32,3,opt,name=size_adjust_pct,json=sizeAdjustPct" json:"size_adjust_pct,omitempty"`             // e.g. 90%
	AscentOverridePct *float32            `protobuf:"fixed32,5,opt,name=ascent_override_pct,json=ascentOverridePct" json:"ascent_override_pct,omitempty"` // e.g. 110%
	LocalSrc          []string            `protobuf:"bytes,4,rep,name=local_src,json=localSrc" json:"local_src,omitempty"`                                // e.g. Impact; the local family to use
}

func (x *FamilyFallbackProto) Reset() {
	*x = FamilyFallbackProto{}
	mi := &file_fonts_public_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FamilyFallbackProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyFallbackProto) ProtoMessage() {}

func (x *FamilyFallbackProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyFallbackProto.ProtoReflect.Descriptor instead.
func (*FamilyFallbackProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{6}
}

func (x *FamilyFallbackProto) GetAxisTarget() []*AxisSegmentProto {
	if x != nil {
		return x.AxisTarget
	}
	return nil
}

func (x *FamilyFallbackProto) GetTarget() []*TargetProto {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *FamilyFallbackProto) GetSizeAdjustPct() float32 {
	if x != nil && x.SizeAdjustPct != nil {
		return *x.SizeAdjustPct
	}
	return 0
}

func (x *FamilyFallbackProto) GetAscentOverridePct() float32 {
	if x != nil && x.AscentOverridePct != nil {
		return *x.AscentOverridePct
	}
	return 0
}

func (x *FamilyFallbackProto) GetLocalSrc() []string {
	if x != nil {
		return x.LocalSrc
	}
	return nil
}

// Corresponds to SampleTextProto in
// google3/java/com/google/fonts/backend/spanner/google_fonts_proto.proto
type SampleTextProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MastheadFull    *string `protobuf:"bytes,1,opt,name=masthead_full,json=mastheadFull" json:"masthead_full,omitempty"`
	MastheadPartial *string `protobuf:"bytes,2,opt,name=masthead_partial,json=mastheadPartial" json:"masthead_partial,omitempty"`
	Styles          *string `protobuf:"bytes,3,opt,name=styles" json:"styles,omitempty"`
	Tester          *string `protobuf:"bytes,4,opt,name=tester" json:"tester,omitempty"`
	PosterSm        *string `protobuf:"bytes,5,opt,name=poster_sm,json=posterSm" json:"poster_sm,omitempty"`
	PosterMd        *string `protobuf:"bytes,6,opt,name=poster_md,json=posterMd" json:"poster_md,omitempty"`
	PosterLg        *string `protobuf:"bytes,7,opt,name=poster_lg,json=posterLg" json:"poster_lg,omitempty"`
	Specimen_48     *string `protobuf:"bytes,8,opt,name=specimen_48,json=specimen48" json:"specimen_48,omitempty"`
	Specimen_36     *string `protobuf:"bytes,9,opt,name=specimen_36,json=specimen36" json:"specimen_36,omitempty"`
	Specimen_32     *string `protobuf:"bytes,10,opt,name=specimen_32,json=specimen32" json:"specimen_32,omitempty"`
	Specimen_21     *string `protobuf:"bytes,11,opt,name=specimen_21,json=specimen21" json:"specimen_21,omitempty"`
	Specimen_16     *string `protobuf:"bytes,12,opt,name=specimen_16,json=specimen16" json:"specimen_16,omitempty"`
	Note            *string `protobuf:"bytes,13,opt,name=note" json:"note,omitempty"`
}

func (x *SampleTextProto) Reset() {
	*x = SampleTextProto{}
	mi := &file_fonts_public_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleTextProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTextProto) ProtoMessage() {}

func (x *SampleTextProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTextProto.ProtoReflect.Descriptor instead.
func (*SampleTextProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{7}
}

func (x *SampleTextProto) GetMastheadFull() string {
	if x != nil && x.MastheadFull != nil {
		return *x.MastheadFull
	}
	return ""
}

func (x *SampleTextProto) GetMastheadPartial() string {
	if x != nil && x.MastheadPartial != nil {
		return *x.MastheadPartial
	}
	return ""
}

func (x *SampleTextProto) GetStyles() string {
	if x != nil && x.Styles != nil {
		return *x.Styles
	}
	return ""
}

func (x *SampleTextProto) GetTester() string {
	if x != nil && x.Tester != nil {
		return *x.Tester
	}
	return ""
}

func (x *SampleTextProto) GetPosterSm() string {
	if x != nil && x.PosterSm != nil {
		return *x.PosterSm
	}
	return ""
}

func (x *SampleTextProto) GetPosterMd() string {
	if x != nil && x.PosterMd != nil {
		return *x.PosterMd
	}
	return ""
}

func (x *SampleTextProto) GetPosterLg() string {
	if x != nil && x.PosterLg != nil {
		return *x.PosterLg
	}
	return ""
}

func (x *SampleTextProto) GetSpecimen_48() string {
	if x != nil && x.Specimen_48 != nil {
		return *x.Specimen_48
	}
	return ""
}

func (x *SampleTextProto) GetSpecimen_36() string {
	if x != nil && x.Specimen_36 != nil {
		return *x.Specimen_36
	}
	return ""
}

func (x *SampleTextProto) GetSpecimen_32() string {
	if x != nil && x.Specimen_32 != nil {
		return *x.Specimen_32
	}
	return ""
}

func (x *SampleTextProto) GetSpecimen_21() string {
	if x != nil && x.Specimen_21 != nil {
		return *x.Specimen_21
	}
	return ""
}

func (x *SampleTextProto) GetSpecimen_16() string {
	if x != nil && x.Specimen_16 != nil {
		return *x.Specimen_16
	}
	return ""
}

func (x *SampleTextProto) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type GlyphGroupProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Glyphs *string `protobuf:"bytes,2,opt,name=glyphs" json:"glyphs,omitempty"`
}

func (x *GlyphGroupProto) Reset() {
	*x = GlyphGroupProto{}
	mi := &file_fonts_public_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlyphGroupProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlyphGroupProto) ProtoMessage() {}

func (x *GlyphGroupProto) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlyphGroupProto.ProtoReflect.Descriptor instead.
func (*GlyphGroupProto) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{8}
}

func (x *GlyphGroupProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GlyphGroupProto) GetGlyphs() string {
	if x != nil && x.Glyphs != nil {
		return *x.Glyphs
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag      *string  `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Position *float32 `protobuf:"fixed32,2,opt,name=position" json:"position,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_fonts_public_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_public_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_fonts_public_proto_rawDescGZIP(), []int{9}
}

func (x *Position) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *Position) GetPosition() float32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

var File_fonts_public_proto protoreflect.FileDescriptor

var file_fonts_public_proto_rawDesc = []byte{
	0x0a, 0x12, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0xfc, 0x09, 0x0a, 0x0b, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66,
	0x6f, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x74, 0x66, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x74, 0x66, 0x41, 0x75, 0x74, 0x6f, 0x68, 0x69, 0x6e, 0x74,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x61, 0x78, 0x65, 0x73, 0x12,
	0x7c, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x18, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x12,
	0x45, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x67, 0x6c, 0x79, 0x70,
	0x68, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x47,
	0x6c, 0x79, 0x70, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x6c, 0x79,
	0x70, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4b, 0x0a, 0x1d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x09, 0x46, 0x6f, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x10, 0x41, 0x78, 0x69, 0x73, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x4f, 0x0a,
	0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x54,
	0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x46, 0x0a, 0x0b,
	0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x61, 0x78, 0x69, 0x73, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x50, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x50, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x72, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x72, 0x63, 0x22, 0xa1, 0x03, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x74, 0x68, 0x65, 0x61, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x61, 0x73, 0x74, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x68, 0x65, 0x61, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x34, 0x38, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x34, 0x38, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x33, 0x36, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x33, 0x36,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x33, 0x32, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x33,
	0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x32, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x32, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x31,
	0x36, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x31, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x6c, 0x79, 0x70, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2a, 0x92, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x53,
	0x5f, 0x4d, 0x41, 0x43, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x4f, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x53, 0x5f,
	0x49, 0x4f, 0x53, 0x10, 0x05, 0x42, 0x25, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x0b, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
}

var (
	file_fonts_public_proto_rawDescOnce sync.Once
	file_fonts_public_proto_rawDescData = file_fonts_public_proto_rawDesc
)

func file_fonts_public_proto_rawDescGZIP() []byte {
	file_fonts_public_proto_rawDescOnce.Do(func() {
		file_fonts_public_proto_rawDescData = protoimpl.X.CompressGZIP(file_fonts_public_proto_rawDescData)
	})
	return file_fonts_public_proto_rawDescData
}

var file_fonts_public_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fonts_public_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_fonts_public_proto_goTypes = []any{
	(TargetTypeProto)(0),        // 0: google.fonts_public.TargetTypeProto
	(*FamilyProto)(nil),         // 1: google.fonts_public.FamilyProto
	(*FontProto)(nil),           // 2: google.fonts_public.FontProto
	(*AxisSegmentProto)(nil),    // 3: google.fonts_public.AxisSegmentProto
	(*SourceProto)(nil),         // 4: google.fonts_public.SourceProto
	(*SourceFileProto)(nil),     // 5: google.fonts_public.SourceFileProto
	(*TargetProto)(nil),         // 6: google.fonts_public.TargetProto
	(*FamilyFallbackProto)(nil), // 7: google.fonts_public.FamilyFallbackProto
	(*SampleTextProto)(nil),     // 8: google.fonts_public.SampleTextProto
	(*GlyphGroupProto)(nil),     // 9: google.fonts_public.GlyphGroupProto
	(*Position)(nil),            // 10: google.fonts_public.Position
	nil,                         // 11: google.fonts_public.FamilyProto.RegistryDefaultOverridesEntry
	nil,                         // 12: google.fonts_public.FamilyProto.SampleGlyphsEntry
}
var file_fonts_public_proto_depIdxs = []int32{
	2,  // 0: google.fonts_public.FamilyProto.fonts:type_name -> google.fonts_public.FontProto
	3,  // 1: google.fonts_public.FamilyProto.axes:type_name -> google.fonts_public.AxisSegmentProto
	11, // 2: google.fonts_public.FamilyProto.registry_default_overrides:type_name -> google.fonts_public.FamilyProto.RegistryDefaultOverridesEntry
	4,  // 3: google.fonts_public.FamilyProto.source:type_name -> google.fonts_public.SourceProto
	7,  // 4: google.fonts_public.FamilyProto.fallbacks:type_name -> google.fonts_public.FamilyFallbackProto
	12, // 5: google.fonts_public.FamilyProto.sample_glyphs:type_name -> google.fonts_public.FamilyProto.SampleGlyphsEntry
	8,  // 6: google.fonts_public.FamilyProto.sample_text:type_name -> google.fonts_public.SampleTextProto
	9,  // 7: google.fonts_public.FamilyProto.ordered_sample_glyphs:type_name -> google.fonts_public.GlyphGroupProto
	10, // 8: google.fonts_public.FontProto.position:type_name -> google.fonts_public.Position
	5,  // 9: google.fonts_public.SourceProto.files:type_name -> google.fonts_public.SourceFileProto
	0,  // 10: google.fonts_public.TargetProto.target_type:type_name -> google.fonts_public.TargetTypeProto
	3,  // 11: google.fonts_public.FamilyFallbackProto.axis_target:type_name -> google.fonts_public.AxisSegmentProto
	6,  // 12: google.fonts_public.FamilyFallbackProto.target:type_name -> google.fonts_public.TargetProto
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_fonts_public_proto_init() }
func file_fonts_public_proto_init() {
	if File_fonts_public_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fonts_public_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fonts_public_proto_goTypes,
		DependencyIndexes: file_fonts_public_proto_depIdxs,
		EnumInfos:         file_fonts_public_proto_enumTypes,
		MessageInfos:      file_fonts_public_proto_msgTypes,
	}.Build()
	File_fonts_public_proto = out.File
	file_fonts_public_proto_rawDesc = nil
	file_fonts_public_proto_goTypes = nil
	file_fonts_public_proto_depIdxs = nil
}
